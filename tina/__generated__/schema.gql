# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  prices(relativePath: String): Prices!
  pricesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PricesFilter): PricesConnection!
  gallery(relativePath: String): Gallery!
  galleryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GalleryFilter): GalleryConnection!
}

input DocumentFilter {
  prices: PricesFilter
  gallery: GalleryFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Prices | Gallery | Folder

type PricesPrice {
  start: String!
  end: String!
  price: Float!
  available: Boolean
}

type Prices implements Node & Document {
  price: [PricesPrice!]!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PricesPriceFilter {
  start: DatetimeFilter
  end: DatetimeFilter
  price: NumberFilter
  available: BooleanFilter
}

input PricesFilter {
  price: PricesPriceFilter
}

type PricesConnectionEdges {
  cursor: String!
  node: Prices
}

type PricesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PricesConnectionEdges]
}

type Gallery implements Node & Document {
  image: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GalleryFilter {
  image: ImageFilter
}

type GalleryConnectionEdges {
  cursor: String!
  node: Gallery
}

type GalleryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GalleryConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePrices(relativePath: String!, params: PricesMutation!): Prices!
  createPrices(relativePath: String!, params: PricesMutation!): Prices!
  updateGallery(relativePath: String!, params: GalleryMutation!): Gallery!
  createGallery(relativePath: String!, params: GalleryMutation!): Gallery!
}

input DocumentUpdateMutation {
  prices: PricesMutation
  gallery: GalleryMutation
  relativePath: String
}

input DocumentMutation {
  prices: PricesMutation
  gallery: GalleryMutation
}

input PricesPriceMutation {
  start: String
  end: String
  price: Float
  available: Boolean
}

input PricesMutation {
  price: [PricesPriceMutation]
}

input GalleryMutation {
  image: String
}

schema {
  query: Query
  mutation: Mutation
}
